/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * My awesome API
 * My awesome API created with ZenStack
 * OpenAPI spec version: 0.5.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AggregatePost200,
  AggregateUser200,
  CountPost200,
  CountUser200,
  CreatePost201,
  CreateUser201,
  DeleteManyPost200,
  DeleteManyUser200,
  DeletePost200,
  DeleteUser200,
  FindFirstPost200,
  FindFirstUser200,
  FindManyPost200,
  FindManyUser200,
  FindUniquePost200,
  FindUniqueUser200,
  GroupByPost200,
  GroupByUser200,
  UpdateManyPost200,
  UpdateManyUser200,
  UpdatePost200,
  UpdateUser200,
  UpsertPost200,
  UpsertUser200
} from './generated.schemas'

export const getCreateUserResponseMock = (overrideResponse: any = {}): CreateUser201 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindUniqueUserResponseMock = (overrideResponse: any = {}): FindUniqueUser200 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindFirstUserResponseMock = (overrideResponse: any = {}): FindFirstUser200 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindManyUserResponseMock = (overrideResponse: any = {}): FindManyUser200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse})), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpdateUserResponseMock = (overrideResponse: any = {}): UpdateUser200 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpdateManyUserResponseMock = (overrideResponse: any = {}): UpdateManyUser200 => ({data: {count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpsertUserResponseMock = (overrideResponse: any = {}): UpsertUser200 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getDeleteUserResponseMock = (overrideResponse: any = {}): DeleteUser200 => ({data: {email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},, undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getDeleteManyUserResponseMock = (overrideResponse: any = {}): DeleteManyUser200 => ({data: {count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getCountUserResponseMock = (overrideResponse: any = {}): CountUser200 => ({data: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{_all: faker.number.int({min: undefined, max: undefined}), email: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getAggregateUserResponseMock = (overrideResponse: any = {}): AggregateUser200 => ({data: {_avg: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _count: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{_all: faker.number.int({min: undefined, max: undefined}), email: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), undefined]), _max: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), ...overrideResponse}]), undefined]), _min: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), ...overrideResponse}]), undefined]), _sum: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getGroupByUserResponseMock = (overrideResponse: any = {}): GroupByUser200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_avg: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _count: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{_all: faker.number.int({min: undefined, max: undefined}), email: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), name: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), undefined]), _max: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), ...overrideResponse}]), undefined]), _min: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), ...overrideResponse}]), undefined]), _sum: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), ...overrideResponse})), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getCreatePostResponseMock = (overrideResponse: any = {}): CreatePost201 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindUniquePostResponseMock = (overrideResponse: any = {}): FindUniquePost200 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindFirstPostResponseMock = (overrideResponse: any = {}): FindFirstPost200 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getFindManyPostResponseMock = (overrideResponse: any = {}): FindManyPost200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpdatePostResponseMock = (overrideResponse: any = {}): UpdatePost200 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpdateManyPostResponseMock = (overrideResponse: any = {}): UpdateManyPost200 => ({data: {count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getUpsertPostResponseMock = (overrideResponse: any = {}): UpsertPost200 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getDeletePostResponseMock = (overrideResponse: any = {}): DeletePost200 => ({data: {author: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{email: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), posts: faker.helpers.arrayElement([[], undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getDeleteManyPostResponseMock = (overrideResponse: any = {}): DeleteManyPost200 => ({data: {count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getCountPostResponseMock = (overrideResponse: any = {}): CountPost200 => ({data: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{_all: faker.number.int({min: undefined, max: undefined}), authorId: faker.number.int({min: undefined, max: undefined}), content: faker.number.int({min: undefined, max: undefined}), createdAt: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), published: faker.number.int({min: undefined, max: undefined}), title: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.number.int({min: undefined, max: undefined}), viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getAggregatePostResponseMock = (overrideResponse: any = {}): AggregatePost200 => ({data: {_avg: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _count: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{_all: faker.number.int({min: undefined, max: undefined}), authorId: faker.number.int({min: undefined, max: undefined}), content: faker.number.int({min: undefined, max: undefined}), createdAt: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), published: faker.number.int({min: undefined, max: undefined}), title: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.number.int({min: undefined, max: undefined}), viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), undefined]), _max: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), published: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.datatype.boolean()]), undefined]), title: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), updatedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _min: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), published: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.datatype.boolean()]), undefined]), title: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), updatedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _sum: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), ...overrideResponse}, meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})

export const getGroupByPostResponseMock = (overrideResponse: any = {}): GroupByPost200 => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_avg: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _count: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{_all: faker.number.int({min: undefined, max: undefined}), authorId: faker.number.int({min: undefined, max: undefined}), content: faker.number.int({min: undefined, max: undefined}), createdAt: faker.number.int({min: undefined, max: undefined}), id: faker.number.int({min: undefined, max: undefined}), published: faker.number.int({min: undefined, max: undefined}), title: faker.number.int({min: undefined, max: undefined}), updatedAt: faker.number.int({min: undefined, max: undefined}), viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse}]), undefined]), _max: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), published: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.datatype.boolean()]), undefined]), title: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), updatedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _min: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), published: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.datatype.boolean()]), undefined]), title: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), updatedAt: faker.helpers.arrayElement([faker.helpers.arrayElement([{},`${faker.date.past().toISOString().split('.')[0]}Z`]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), _sum: faker.helpers.arrayElement([faker.helpers.arrayElement([{},{authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), viewCount: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), ...overrideResponse}]), undefined]), authorId: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.number.int({min: undefined, max: undefined})]), undefined]), content: faker.helpers.arrayElement([faker.helpers.arrayElement([{},faker.word.sample()]), undefined]), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), published: faker.datatype.boolean(), title: faker.word.sample(), updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, viewCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})), meta: faker.helpers.arrayElement([{meta: faker.helpers.arrayElement([{serialization: faker.helpers.arrayElement([{}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse}, undefined]), ...overrideResponse})


export const getCreateUserMockHandler = (overrideResponse?: CreateUser201) => {
  return http.post('*/api/model/user/create', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCreateUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindUniqueUserMockHandler = (overrideResponse?: FindUniqueUser200) => {
  return http.get('*/api/model/user/findUnique', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindUniqueUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindFirstUserMockHandler = (overrideResponse?: FindFirstUser200) => {
  return http.get('*/api/model/user/findFirst', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindFirstUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindManyUserMockHandler = (overrideResponse?: FindManyUser200) => {
  return http.get('*/api/model/user/findMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindManyUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateUserMockHandler = (overrideResponse?: UpdateUser200) => {
  return http.patch('*/api/model/user/update', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateManyUserMockHandler = (overrideResponse?: UpdateManyUser200) => {
  return http.patch('*/api/model/user/updateMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateManyUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpsertUserMockHandler = (overrideResponse?: UpsertUser200) => {
  return http.post('*/api/model/user/upsert', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpsertUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: DeleteUser200) => {
  return http.delete('*/api/model/user/delete', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getDeleteUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteManyUserMockHandler = (overrideResponse?: DeleteManyUser200) => {
  return http.delete('*/api/model/user/deleteMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getDeleteManyUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCountUserMockHandler = (overrideResponse?: CountUser200) => {
  return http.get('*/api/model/user/count', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCountUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAggregateUserMockHandler = (overrideResponse?: AggregateUser200) => {
  return http.get('*/api/model/user/aggregate', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAggregateUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGroupByUserMockHandler = (overrideResponse?: GroupByUser200) => {
  return http.get('*/api/model/user/groupBy', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGroupByUserResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreatePostMockHandler = (overrideResponse?: CreatePost201) => {
  return http.post('*/api/model/post/create', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCreatePostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindUniquePostMockHandler = (overrideResponse?: FindUniquePost200) => {
  return http.get('*/api/model/post/findUnique', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindUniquePostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindFirstPostMockHandler = (overrideResponse?: FindFirstPost200) => {
  return http.get('*/api/model/post/findFirst', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindFirstPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getFindManyPostMockHandler = (overrideResponse?: FindManyPost200) => {
  return http.get('*/api/model/post/findMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getFindManyPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdatePostMockHandler = (overrideResponse?: UpdatePost200) => {
  return http.patch('*/api/model/post/update', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdatePostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateManyPostMockHandler = (overrideResponse?: UpdateManyPost200) => {
  return http.patch('*/api/model/post/updateMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpdateManyPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpsertPostMockHandler = (overrideResponse?: UpsertPost200) => {
  return http.post('*/api/model/post/upsert', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getUpsertPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeletePostMockHandler = (overrideResponse?: DeletePost200) => {
  return http.delete('*/api/model/post/delete', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getDeletePostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteManyPostMockHandler = (overrideResponse?: DeleteManyPost200) => {
  return http.delete('*/api/model/post/deleteMany', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getDeleteManyPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCountPostMockHandler = (overrideResponse?: CountPost200) => {
  return http.get('*/api/model/post/count', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getCountPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getAggregatePostMockHandler = (overrideResponse?: AggregatePost200) => {
  return http.get('*/api/model/post/aggregate', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getAggregatePostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGroupByPostMockHandler = (overrideResponse?: GroupByPost200) => {
  return http.get('*/api/model/post/groupBy', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGroupByPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getMyAwesomeAPIMock = () => [
  getCreateUserMockHandler(),
  getFindUniqueUserMockHandler(),
  getFindFirstUserMockHandler(),
  getFindManyUserMockHandler(),
  getUpdateUserMockHandler(),
  getUpdateManyUserMockHandler(),
  getUpsertUserMockHandler(),
  getDeleteUserMockHandler(),
  getDeleteManyUserMockHandler(),
  getCountUserMockHandler(),
  getAggregateUserMockHandler(),
  getGroupByUserMockHandler(),
  getCreatePostMockHandler(),
  getFindUniquePostMockHandler(),
  getFindFirstPostMockHandler(),
  getFindManyPostMockHandler(),
  getUpdatePostMockHandler(),
  getUpdateManyPostMockHandler(),
  getUpsertPostMockHandler(),
  getDeletePostMockHandler(),
  getDeleteManyPostMockHandler(),
  getCountPostMockHandler(),
  getAggregatePostMockHandler(),
  getGroupByPostMockHandler()
]
